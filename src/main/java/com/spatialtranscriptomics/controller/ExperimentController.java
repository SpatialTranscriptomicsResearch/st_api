/*
 * Copyright (C) 2012 Spatial Transcriptomics AB
 * Read LICENSE for more information about licensing terms
 * Contact: Jose Fernandez Navarro <jose.fernandez.navarro@scilifelab.se>
 */

package com.spatialtranscriptomics.controller;

import java.util.List;

import javax.validation.Valid;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Repository;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.spatialtranscriptomics.exceptions.BadRequestResponse;
import com.spatialtranscriptomics.exceptions.CustomBadRequestException;
import com.spatialtranscriptomics.exceptions.CustomNotFoundException;
import com.spatialtranscriptomics.exceptions.NotFoundResponse;
import com.spatialtranscriptomics.model.Experiment;
import com.spatialtranscriptomics.serviceImpl.ExperimentServiceImpl;

/**
 * This class is Spring MVC controller class for the API endpoint "rest/experiment". It implements the methods available at this endpoint.
 */

@Repository
@Controller
@RequestMapping("/rest/experiment")
public class ExperimentController {

	@SuppressWarnings("unused")
	private static final Logger logger = Logger.getLogger(ExperimentController.class);

	@Autowired
	ExperimentServiceImpl experimentService;

	// list
	@Secured({"ROLE_CM","ROLE_ADMIN"})
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody
	List<Experiment> list() {

		List<Experiment> experiments = experimentService.list();
		if (experiments == null) {
			throw new CustomNotFoundException(
					"No experiments found or you dont have permissions to access them.");
		}
		return experiments;
	}

	// get
	@Secured({"ROLE_CM","ROLE_ADMIN"})
	@RequestMapping(value = "{id}", method = RequestMethod.GET)
	public @ResponseBody
	Experiment get(@PathVariable String id) {
		Experiment experiment = experimentService.find(id);

		if (experiment == null) {
			throw new CustomNotFoundException(
					"A experiment with this ID does not exist or you dont have permissions to access it.");
		}

		return experiment;
	}

	// add
	@Secured({"ROLE_CM","ROLE_ADMIN"})
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody
	Experiment add(@RequestBody @Valid Experiment experiment, BindingResult result) {

		// Experiment validation
		if (result.hasErrors()) {
			// TODO send error messages here
			throw new CustomBadRequestException(
					"Experiment is invalid. Missing required fields?");
		}

		if (experiment.getId() != null) {
			throw new CustomBadRequestException(
					"The experiment you want to add must not have an ID. The ID will be autogenerated.");
		}
		
		if (experimentService.findByName(experiment.getName()) != null) {
			throw new CustomBadRequestException(
					"An experiment with this name already exists. Experiment names are unique.");
		}

		return experimentService.add(experiment);
	}

	// update
	@Secured({"ROLE_CM","ROLE_ADMIN"})
	@RequestMapping(value = "{id}", method = RequestMethod.PUT)
	public @ResponseBody
	void update(@PathVariable String id, @RequestBody @Valid Experiment experiment,
			BindingResult result) {

		// Experiment validation
		if (result.hasErrors()) {
			// TODO send error messages here
			throw new CustomBadRequestException(
					"Experiment is invalid. Missing required fields?");
		}

		if (!id.equals(experiment.getId())) {
			throw new CustomBadRequestException(
					"ID in request URL does not match ID in content body.");
		} else if (experimentService.find(id) == null) {
			throw new CustomBadRequestException(
					"A experiment with this ID does not exist or you don't have permissions to access it.");
		} else {
			experimentService.update(experiment);
		}
	}

	// delete
	@Secured({"ROLE_CM","ROLE_ADMIN"})
	@RequestMapping(value = "{id}", method = RequestMethod.DELETE)
	public @ResponseBody
	void delete(@PathVariable String id) {
		experimentService.delete(id);
	}

	@ExceptionHandler(CustomNotFoundException.class)
	@ResponseStatus(value = HttpStatus.NOT_FOUND)
	public @ResponseBody
	NotFoundResponse handleNotFoundException(CustomNotFoundException ex) {
		return new NotFoundResponse(ex.getMessage());
	}

	@ExceptionHandler(CustomBadRequestException.class)
	@ResponseStatus(value = HttpStatus.BAD_REQUEST)
	public @ResponseBody
	BadRequestResponse handleNotFoundException(CustomBadRequestException ex) {
		return new BadRequestResponse(ex.getMessage());
	}

}
